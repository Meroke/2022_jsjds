
<launch>
    <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    <rosparam file="$(find turn_on_robot)/param_senior_mec_no/costmap_common_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find turn_on_robot)/param_senior_mec_no/costmap_common_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find turn_on_robot)/param_common/local_costmap_params.yaml" command="load" />
    <rosparam file="$(find turn_on_robot)/param_common/global_costmap_params.yaml" command="load" />
    <rosparam file="$(find turn_on_robot)/param_common/move_base_params.yaml" command="load" />
    <rosparam file="$(find turn_on_robot)/param_common/base_global_planner_param.yaml" command="load" />
    <rosparam file="$(find turn_on_robot)/param_common/teb_local_planner_params.yaml" command="load" />
  </node>
  
  <arg name="mapping_mode"  default="gmapping" doc="opt: gmapping, hector,cartographer,karto"/>
  
  <!-- 开启机器人底层相关节点  -->
  <include file="$(find turn_on_robot)/launch/turn_on_robot.launch" />
  <!-- 开启gmapping建图算法  -->
  <group if="$(eval mapping_mode == 'gmapping')">
  <include file="$(find turn_on_robot)/launch/include/algorithm_gmapping.launch" />
  </group>
  <!-- 开启hector建图算法  -->
  <group if="$(eval mapping_mode == 'hector')">
  <include file="$(find turn_on_robot)/launch/include/algorithm_hector.launch" />
  </group>  
   <!-- 开启karto建图算法  -->
  <group if="$(eval mapping_mode == 'karto')">
  <include file="$(find turn_on_robot)/launch/include/algorithm_karto.launch" />
  </group>  
   <!-- 开启cartographer建图算法  -->
  <group if="$(eval mapping_mode == 'cartographer')">
  <!--这个功能包的路径是：/opt/ros/melodic/share/cartographer_ros-->
  <include file="$(find cartographer_ros)/launch/demo_revo_lds.launch" />
  </group>  

</launch>
